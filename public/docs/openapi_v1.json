{
  "openapi": "3.0.3",
  "info": {
    "title": "Laratchi boilerplate",
    "description": "# API Version 1 Specification\n\nWelcome to the API V1 documentation. This document outlines the request and response formats along with data conversion guidelines.\n\n---\n\n## Request Data Format\n\n- **Input Content Types**: The API expects one of the following content types for incoming requests: `multipart/form-data` or `application/x-www-form-urlencoded`.\n\n- **Output Content Type**: The API typically responds with data in `application/json` format.\n\n---\n\n## Data Type Conversions\n\n### JSON to Form Data\n\nWhen converting JSON data to form data, please follow these conversion guidelines:\n\n#### Boolean\n\n- `true` should be converted to `1`\n- `false` should be converted to `0`\n\n#### String\n\n- Strings remain unchanged.\n\n#### Number\n\n- Numeric types should be converted to strings.\n\n#### Null\n\n- For null values, send an empty string.\n\n#### Object and Array\n\n- Encode using the exploded and deep object format. For example, `{data: [{title: 'a'}, {title: null}], collection: [], object: {}}` becomes `?data[0][title]=a&data[1][title]=&collection=&object=`.\n\n**Note:**\n\n- Empty arrays and empty objects should be encoded as an empty string.\n\n---\n\nFeel free to consult this guide while interacting with the API. Let us know if you have any questions or need further clarification.",
    "version": "4.0.0",
    "contact": {
      "name": "Tomáš Chochola",
      "url": "https://github.com/tomchochola",
      "email": "chocholatom1997@gmail.com"
    }
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "security": [
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Auth system"
    },
    {
      "name": "password",
      "description": "Password"
    },
    {
      "name": "email_verification",
      "description": "E-mail verification"
    },
    {
      "name": "me",
      "description": "Me"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register new user",
        "description": "Register and login new user\n\nUser must not be authenticated\n\nThrottled",
        "operationId": "post_auth_register",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["name", "email", "password", "locale"],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/varchar"
                  },
                  "email": {
                    "$ref": "#/components/schemas/email"
                  },
                  "password": {
                    "$ref": "#/components/schemas/password"
                  },
                  "locale": {
                    "$ref": "#/components/schemas/locale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Me"
          },
          "202": {
            "description": "E-mail confirmation sent"
          },
          "204": {
            "description": "User has been registered but can not login"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "427": {
            "$ref": "#/components/responses/427"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Log in user",
        "description": "Log in user\n\nUser must not be authenticated\n\nThrottled",
        "operationId": "post_auth_login",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email"
                  },
                  "password": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Me"
          },
          "403": {
            "description": "User can not login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "427": {
            "$ref": "#/components/responses/427"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Logout",
        "description": "Logout\n\nUser must be authenticated",
        "operationId": "post_auth_logout_current",
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/email_verification/confirm": {
      "post": {
        "tags": ["email_verification"],
        "summary": "Confirm e-mail",
        "description": "Confirm e-mail\n\nThrottled",
        "operationId": "post_email_verification_confirm",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["token", "email"],
                "properties": {
                  "token": {
                    "$ref": "#/components/schemas/varchar"
                  },
                  "email": {
                    "$ref": "#/components/schemas/email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "409": {
            "description": "E-mail already verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/password/forgot": {
      "post": {
        "tags": ["password"],
        "summary": "Send password forgot e-mail",
        "description": "Send password forgot e-mail\n\nUser must not be authenticated\n\nThrottled",
        "operationId": "post_password_forgot",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/204"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "427": {
            "$ref": "#/components/responses/427"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/password/reset": {
      "post": {
        "tags": ["password"],
        "summary": "Reset password",
        "description": "Reset password and login user\n\nUser must not be authenticated\n\nThrottled",
        "operationId": "post_password_reset",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["email", "token", "password"],
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email"
                  },
                  "token": {
                    "$ref": "#/components/schemas/varchar"
                  },
                  "password": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Me"
          },
          "403": {
            "description": "User can not login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "427": {
            "$ref": "#/components/responses/427"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/password/update": {
      "post": {
        "tags": ["password"],
        "summary": "Update password",
        "description": "Update password\n\nUser must be authenticated\n\nThrottled",
        "operationId": "post_password_update",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["password", "new_password"],
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/password"
                  },
                  "new_password": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Me"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/me/show": {
      "get": {
        "tags": ["me"],
        "summary": "Get currently authenticated user",
        "description": "Get currently authenticated user",
        "operationId": "get_me_show",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Me"
          },
          "204": {
            "description": "User not authenticated"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    },
    "/me/update": {
      "post": {
        "tags": ["me"],
        "summary": "Update currently authenticated user",
        "description": "Update currently authenticated user\n\nUser must be authenticated\n\nThrottled if updating credentials",
        "operationId": "post_me_update",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/email"
                  },
                  "name": {
                    "$ref": "#/components/schemas/varchar"
                  },
                  "locale": {
                    "$ref": "#/components/schemas/locale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Me"
          },
          "202": {
            "description": "E-mail confirmation sent"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    },
    "/me/destroy": {
      "post": {
        "tags": ["me"],
        "summary": "Destroy currently authenticated user",
        "description": "Destroy currently authenticated user\n\nUser must be authenticated\n\nThrottled",
        "operationId": "post_me_destroy",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "request data",
                "type": "object",
                "required": ["password"],
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "id": {
        "description": "id",
        "in": "query",
        "name": "id",
        "schema": {
          "$ref": "#/components/schemas/id"
        }
      },
      "slug": {
        "description": "slug",
        "in": "query",
        "name": "slug",
        "schema": {
          "$ref": "#/components/schemas/slug"
        }
      },
      "filterSearch": {
        "description": "search filter",
        "in": "query",
        "name": "filter[search]",
        "schema": {
          "$ref": "#/components/schemas/varchar"
        }
      },
      "take": {
        "description": "limit count or per page count",
        "in": "query",
        "name": "take",
        "schema": {
          "description": "limit count or per page count",
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      },
      "select": {
        "description": "enable select mode",
        "in": "query",
        "name": "select",
        "schema": {
          "description": "enable select mode",
          "type": "boolean"
        }
      },
      "count": {
        "description": "enable count mode",
        "in": "query",
        "name": "count",
        "schema": {
          "description": "enable count mode",
          "type": "boolean"
        }
      },
      "filterId": {
        "description": "id filter",
        "in": "query",
        "name": "filter[id][]",
        "schema": {
          "description": "id",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/id"
          }
        }
      },
      "filterSlug": {
        "description": "slug filter",
        "in": "query",
        "name": "filter[slug][]",
        "schema": {
          "description": "slug",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/slug"
          }
        }
      },
      "filterNotId": {
        "description": "not id filter",
        "in": "query",
        "name": "filter[not_id][]",
        "schema": {
          "description": "id",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/id"
          }
        }
      }
    },
    "schemas": {
      "slug": {
        "description": "slug",
        "type": "string",
        "format": "identifier",
        "minLength": 1,
        "maxLength": 255
      },
      "nullableSlug": {
        "description": "slug or null",
        "type": "string",
        "format": "identifier",
        "minLength": 1,
        "maxLength": 255,
        "nullable": true
      },
      "id": {
        "description": "id",
        "type": "integer",
        "minimum": 1,
        "maximum": 9223372036854775807
      },
      "nullableId": {
        "description": "id or null",
        "type": "integer",
        "minimum": 1,
        "maximum": 9223372036854775807,
        "nullable": true
      },
      "password": {
        "description": "password",
        "type": "string",
        "format": "password",
        "pattern": ".+",
        "minLength": 8,
        "maxLength": 1024
      },
      "nullablePassword": {
        "description": "password or null",
        "type": "string",
        "format": "password",
        "pattern": ".+",
        "minLength": 8,
        "maxLength": 1024,
        "nullable": true
      },
      "locale": {
        "description": "locale",
        "type": "string",
        "enum": ["en", "cs"]
      },
      "nullableLocale": {
        "description": "locale or null",
        "type": "string",
        "enum": ["en", "cs"],
        "nullable": true
      },
      "email": {
        "description": "e-mail",
        "type": "string",
        "format": "email",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255
      },
      "nullableEmail": {
        "description": "e-mail or null",
        "type": "string",
        "format": "email",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255,
        "nullable": true
      },
      "varchar": {
        "description": "varchar",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255
      },
      "nullableVarchar": {
        "description": "varchar or null",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255,
        "nullable": true
      },
      "tinyText": {
        "description": "tiny text",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 256
      },
      "nullableTinyText": {
        "description": "tiny text or null",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 256,
        "nullable": true
      },
      "text": {
        "description": "text",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 65535
      },
      "nullableText": {
        "description": "text or null",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 65535,
        "nullable": true
      },
      "mediumText": {
        "description": "medium text",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 16777215
      },
      "nullableMediumText": {
        "description": "medium text or null",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 16777215,
        "nullable": true
      },
      "longText": {
        "description": "long text",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 4294967295
      },
      "nullableLongText": {
        "description": "long text or null",
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 4294967295,
        "nullable": true
      },
      "tinyInt": {
        "description": "tiny int",
        "type": "integer",
        "minimum": -128,
        "maximum": 127
      },
      "nullableTinyInt": {
        "description": "tiny int or null",
        "type": "integer",
        "minimum": -128,
        "maximum": 127,
        "nullable": true
      },
      "unsignedTinyInt": {
        "description": "unsigned tiny int",
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "nullableUnsignedTinyInt": {
        "description": "unsigned tiny int or null",
        "type": "integer",
        "minimum": 0,
        "maximum": 255,
        "nullable": true
      },
      "smallInt": {
        "description": "small int",
        "type": "integer",
        "minimum": -32768,
        "maximum": 32767
      },
      "nullableSmallInt": {
        "description": "small int or null",
        "type": "integer",
        "minimum": -32768,
        "maximum": 32767,
        "nullable": true
      },
      "unsignedSmallInt": {
        "description": "unsigned small int",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "nullableUnsignedSmallInt": {
        "description": "unsigned small int or null",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535,
        "nullable": true
      },
      "mediumInt": {
        "description": "medium int",
        "type": "integer",
        "minimum": -8388608,
        "maximum": 8388607
      },
      "nullableMediumInt": {
        "description": "medium int or null",
        "type": "integer",
        "minimum": -8388608,
        "maximum": 8388607,
        "nullable": true
      },
      "unsignedMediumInt": {
        "description": "unsigned medium int",
        "type": "integer",
        "minimum": 0,
        "maximum": 16777215
      },
      "nullableUnsignedMediumInt": {
        "description": "unsigned medium int or null",
        "type": "integer",
        "minimum": 0,
        "maximum": 16777215,
        "nullable": true
      },
      "int": {
        "description": "int",
        "type": "integer",
        "minimum": -2147483648,
        "maximum": 2147483647
      },
      "nullableInt": {
        "description": "int or null",
        "type": "integer",
        "minimum": -2147483648,
        "maximum": 2147483647,
        "nullable": true
      },
      "unsignedInt": {
        "description": "unsigned int",
        "type": "integer",
        "minimum": 0,
        "maximum": 4294967295
      },
      "nullableUnsignedInt": {
        "description": "unsigned int or null",
        "type": "integer",
        "minimum": 0,
        "maximum": 4294967295,
        "nullable": true
      },
      "bigInt": {
        "description": "big int",
        "type": "integer",
        "minimum": -9223372036854775808,
        "maximum": 9223372036854775807
      },
      "nullableBigInt": {
        "description": "big int or null",
        "type": "integer",
        "minimum": -9223372036854775808,
        "maximum": 9223372036854775807,
        "nullable": true
      },
      "unsignedBigInt": {
        "description": "unsigned big int",
        "type": "integer",
        "minimum": 0,
        "maximum": 9223372036854775807
      },
      "nullableUnsignedBigInt": {
        "description": "unsigned big int or null",
        "type": "integer",
        "minimum": 0,
        "maximum": 9223372036854775807,
        "nullable": true
      },
      "string": {
        "description": "string",
        "type": "string"
      },
      "nullableString": {
        "description": "string or null",
        "type": "string",
        "nullable": true
      },
      "integer": {
        "description": "integer",
        "type": "integer"
      },
      "nullableInteger": {
        "description": "integer or null",
        "type": "integer",
        "nullable": true
      },
      "number": {
        "description": "number",
        "type": "number"
      },
      "nullableNumber": {
        "description": "number or null",
        "type": "number",
        "nullable": true
      },
      "double": {
        "description": "double",
        "type": "number",
        "format": "double"
      },
      "nullableDouble": {
        "description": "double or null",
        "type": "number",
        "format": "double",
        "nullable": true
      },
      "timestamp": {
        "description": "timestamp",
        "type": "string",
        "format": "date-time"
      },
      "nullableTimestamp": {
        "description": "timestamp or null",
        "type": "string",
        "format": "date-time",
        "nullable": true
      },
      "date": {
        "description": "date",
        "type": "string",
        "format": "date"
      },
      "nullableDate": {
        "description": "date or null",
        "type": "string",
        "format": "date",
        "nullable": true
      },
      "boolean": {
        "description": "boolean",
        "type": "boolean"
      },
      "nullableBoolean": {
        "description": "boolean",
        "type": "boolean",
        "nullable": true
      },
      "Resource": {
        "description": "json:api resource",
        "type": "object",
        "required": ["id", "slug", "type"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/string"
          },
          "slug": {
            "$ref": "#/components/schemas/string"
          },
          "type": {
            "$ref": "#/components/schemas/string"
          }
        }
      },
      "NullableResource": {
        "description": "json:api resource",
        "type": "object",
        "required": ["id", "slug", "type"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/string"
          },
          "slug": {
            "$ref": "#/components/schemas/string"
          },
          "type": {
            "$ref": "#/components/schemas/string"
          }
        },
        "nullable": true
      },
      "NullableRelationship": {
        "description": "json:api nullable relationship",
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NullableResource"
          }
        }
      },
      "Relationships": {
        "description": "json:api relationships",
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "description": "json:api resources",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        }
      },
      "Me": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "description": "me schema",
            "type": "object",
            "required": ["attributes"],
            "properties": {
              "type": {
                "enum": ["users"]
              },
              "attributes": {
                "description": "attributes",
                "type": "object",
                "required": ["name", "email", "locale", "email_verified_at", "created_at", "updated_at"],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/string"
                  },
                  "email": {
                    "$ref": "#/components/schemas/string"
                  },
                  "locale": {
                    "$ref": "#/components/schemas/locale"
                  },
                  "email_verified_at": {
                    "$ref": "#/components/schemas/nullableTimestamp"
                  },
                  "created_at": {
                    "$ref": "#/components/schemas/timestamp"
                  },
                  "updated_at": {
                    "$ref": "#/components/schemas/timestamp"
                  }
                }
              }
            }
          }
        ]
      },
      "UserEmbed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "description": "User embed schema",
            "type": "object",
            "required": ["attributes"],
            "properties": {
              "type": {
                "enum": ["users"]
              },
              "attributes": {
                "description": "attributes",
                "type": "object",
                "required": ["name", "email"],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/string"
                  },
                  "email": {
                    "$ref": "#/components/schemas/string"
                  }
                }
              }
            }
          }
        ]
      },
      "Error": {
        "description": "generic error",
        "type": "object",
        "required": ["code"],
        "properties": {
          "code": {
            "$ref": "#/components/schemas/integer"
          }
        }
      }
    },
    "responses": {
      "204": {
        "description": "Successful operation"
      },
      "4xx": {
        "description": "Client error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthenticated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "422": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "description": "## Validation Errors\n\nThis section describes how the API handles validation errors and returns them in responses.\n\n### Error Format\n\nErrors are returned in `csv` format. Strings are enclosed in double quotes `\"`, and any occurrence of a double quote within a string is doubled (e.g., `'string \" string'` becomes `'string \"\" string'`). Fields are comma-separated.\n\n### Data Type Conversion for Errors\n\n#### Boolean\n\n- `true` becomes `1`\n- `false` becomes `0`\n\n#### String\n\n- Enclose strings in double quotes: `\"String\"`\n\n#### Number\n\n- Numbers remain unchanged\n\n#### Null\n\n- `null` is represented as an empty string\n\n### Example Conversions\n\nFor `[true, false, null, 1.0, 1, 'string \" string']`, the CSV would be `1,0,,1.0,1,\"string \"\" string\"`.\n\n### Sample Error Responses\n\n- `{errors: {title: ['required_unless:\"type\",0,1']}}`\n- `{errors: {date: ['before:\"2023-01-01\"']}}`\n- `{errors: {event_date: ['before:\"registration_date\"']}}`",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "description": "validation errors",
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "description": "computer readable validation error",
                          "type": "string",
                          "enum": [
                            "accepted",
                            "accepted_if:other,value",
                            "active_url",
                            "after:date",
                            "after_or_equal:date",
                            "alpha",
                            "alpha_dash",
                            "alpha_num",
                            "array",
                            "collection",
                            "ascii",
                            "before:date",
                            "before_or_equal:date",
                            "between_array:min,max",
                            "between_file:min,max",
                            "between_numeric:min,max",
                            "between_string:min,max",
                            "boolean",
                            "confirmed",
                            "current_password",
                            "date",
                            "date_equals:date",
                            "date_format:format",
                            "decimal:decimal",
                            "declined",
                            "declined_if:other,value",
                            "different:other",
                            "digits:digits",
                            "digits_between:min,max",
                            "dimensions",
                            "distinct",
                            "doesnt_end_with:values,values..",
                            "doesnt_start_with:values,values..",
                            "email",
                            "ends_with:values,values..",
                            "enum",
                            "exists",
                            "file",
                            "filled",
                            "gt_array:value",
                            "gt_file:value",
                            "gt_numeric:value",
                            "gt_string:value",
                            "gte_array:value",
                            "gte_file:value",
                            "gte_numeric:value",
                            "gte_string:value",
                            "image",
                            "in",
                            "in_array:other",
                            "integer",
                            "ip",
                            "ipv4",
                            "ipv6",
                            "json",
                            "lowercase",
                            "lt_array:value",
                            "lt_file:value",
                            "lt_numeric:value",
                            "lt_string:value",
                            "lte_array:value",
                            "lte_file:value",
                            "lte_numeric:value",
                            "lte_string:value",
                            "mac_address",
                            "max_array:max",
                            "max_file:max",
                            "max_numeric:max",
                            "max_string:max",
                            "max_digits:max",
                            "mimes:values,values..",
                            "mimetypes:values,values..",
                            "min_array:min",
                            "min_file:min",
                            "min_numeric:min",
                            "min_string:min",
                            "min_digits:min",
                            "missing",
                            "missing_if:other,values,values..",
                            "missing_unless:other,values,values..",
                            "missing_with:values,values..",
                            "missing_with_all:values,values..",
                            "multiple_of:value",
                            "not_in",
                            "not_regex",
                            "numeric",
                            "password_letters",
                            "password_mixed",
                            "password_numbers",
                            "password_symbols",
                            "password_uncompromised",
                            "present",
                            "prohibited",
                            "prohibited_if:other,value",
                            "prohibited_unless:other,values,values..",
                            "prohibits:other,other..",
                            "regex",
                            "required",
                            "required_array_keys:values,values..",
                            "required_if:other,value",
                            "required_if_accepted:other",
                            "required_unless:other,values,values..",
                            "required_with:values,values..",
                            "required_with_all:values,values..",
                            "required_without:values,values..",
                            "required_without_all:values,values..",
                            "same:other",
                            "size_array:size",
                            "size_file:size",
                            "size_numeric:size",
                            "size_string:size",
                            "starts_with:values,values..",
                            "string",
                            "timezone",
                            "unique",
                            "uploaded",
                            "uppercase",
                            "url",
                            "ulid",
                            "uuid",
                            "prohibited_with:values,values..",
                            "prohibited_with_all:values,values..",
                            "prohibited_without:values,values..",
                            "prohibited_without_all:values,values..",
                            "strlen:size",
                            "strlen_max:max",
                            "strlen_min:min",
                            "throttled:seconds",
                            "auth_failed",
                            "auth_password",
                            "auth_throttle:seconds",
                            "auth_blocked",
                            "passwords_reset",
                            "passwords_sent",
                            "passwords_throttled",
                            "passwords_token",
                            "passwords_user",
                            "invalid",
                            "fallback"
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "427": {
        "description": "Must not be authenticated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "429": {
        "description": "Throttled",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Me": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "description": "response data",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            }
          }
        }
      },
      "Resource": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "description": "response data",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      },
      "NullableResource": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "description": "response data",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NullableResource"
                }
              }
            }
          }
        }
      },
      "Resources": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "description": "response data",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "description": "resources",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
